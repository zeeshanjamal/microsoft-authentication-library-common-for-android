plugins {
    id 'com.microsoft.identity.buildsystem' version '0.2.3'
    id 'com.android.library'
    id 'pmd'
    id 'checkstyle'
    id 'maven-publish'
    id 'kotlin-android'
}

apply from: '../versioning/version_tasks.gradle'

def desugarCode = false

if (project.hasProperty("sugar")) {
    desugarCode = sugar.toBoolean()
}

buildSystem {
    desugar = desugarCode
}

def enableCodeCoverage = false

if (project.hasProperty("codeCoverageEnabled")) {
    enableCodeCoverage = codeCoverageEnabled.toBoolean()
}

codeCoverageReport {
    coverage.enabled = enableCodeCoverage
}

// In dev, we want to keep the dependencies(common4j, broker4j, common) to 0.0.+ to be able to be consumed by daily dev pipeline.
// In release/*, we change these to specific versions being consumed.
def common4jVersion = "8.0.0"
if (project.hasProperty("distCommon4jVersion") && project.distCommon4jVersion != '') {
    common4jVersion = project.distCommon4jVersion
}

android {
    namespace "com.microsoft.identity.common"

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        multiDexEnabled true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getAppVersionCode()
        versionName getAppVersionName()
        project.archivesBaseName = "common"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //Languages Common supports.
        resConfigs "en", "ar", "b+sr+Latn", "bg", "ca", "cs", "da", "de", "el", "es", "et",
                "eu", "fi", "fr", "gl", "he", "hi", "hr", "hu", "in", "it", "iw", "ja",
                "kk", "ko", "lt", "lv", "ms", "nb", "nl", "pl", "pt-rBR", "pt-rPT", "ro",
                "ru", "sk", "sl", "sr", "sv", "th", "tr", "uk", "vi", "zh-rCN", "zh-rTW"
    }

    buildTypes {
        debug {
            testCoverageEnabled enableCodeCoverage
            minifyEnabled false
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
    }
    //Upgrading to Java 8 in order to use YubiKit SDK
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
        disable 'RtlHardcoded'
    }

    testOptions {
        unitTests.all {
            exclude 'com/microsoft/identity/common/integration'
            exclude 'com/microsoft/identity/common/ropc'
        }
    }

    flavorDimensions "main"

    productFlavors {
        // The 'local' productFlavor sources common4j from mavenLocal and is intended to be used
        // during development.
        local {
            dimension "main"
        }

        // The 'dist' productFlavor sources common from a central repository and is intended
        // to be used for releases.
        dist {
            dimension "main"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'

            // Also load source from common-java
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
            res.srcDirs = ['src/main/res']
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }
}

dependencies {
    //Java 8 - Desugaring - Enabled/Disabled via plugin
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$rootProject.ext.coreLibraryDesugaringVersion"

    localApi(project(":common4j")) {
        transitive = false
    }

    distApi("com.microsoft.identity:common4j:${common4jVersion}") {
        transitive = false
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"

    implementation(group: 'com.microsoft.device.display', name: 'display-mask', version: '0.3.0')

    implementation "cz.msebera.android:httpclient:$rootProject.ext.mseberaApacheHttpClientVersion"
    implementation "com.nimbusds:nimbus-jose-jwt:$rootProject.ext.nimbusVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appCompatVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation "androidx.browser:browser:$rootProject.ext.browserVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    //For Executive Order work
    implementation "com.yubico.yubikit:android:$rootProject.ext.yubikitAndroidVersion"
    implementation "com.yubico.yubikit:piv:$rootProject.ext.yubikitPivVersion"

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.3.0'

    compileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"

    // Test dependencies
    // Needed to resolve JSONObject inside of non-instrumented tests
    testImplementation 'org.json:json:20160810'
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$rootProject.ext.powerMockVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    testImplementation "androidx.test:core:$rootProject.ext.androidxTestCoreVersion"
    testImplementation project(":LabApiUtilities")

    testCompileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"

    // Instrumented dependencies
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidxJunitVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoAndroidVersion"
    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.ext.espressoCoreVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation platform("io.opentelemetry:opentelemetry-bom:1.18.0")
    implementation('io.opentelemetry:opentelemetry-api:1.18.0')
    implementation ("androidx.fragment:fragment:1.3.2")
}

// Create tasks to generate javadoc
android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
        source = variant.javaCompileProvider.get().source

        title = "Microsoft Identity Android Common"

        // First add all of your dependencies to the classpath, then add the android jars
        doFirst { classpath += files(variant.javaCompiler.classpath.files) }
        classpath += files(android.getBootClasspath())

        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.addStringOption('Xdoclint:none', '-quiet')

        // We're excluding these generated files
        exclude '**/R.java'
    }
}

// Create tasks to generate javadoc jar
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        archiveClassifier.set('javadoc')
        from tasks["${variant.name}Javadoc"].destinationDir
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
       // xml.enabled = false
       // html.enabled = true
    }
}

// For publishing to the remote maven repo.
afterEvaluate {

    publishing {
        publications {
            distRelease(MavenPublication) {
                from components.distRelease
                groupId 'com.microsoft.identity'
                artifactId 'common'
                //Edit the 'version' here for VSTS RC build
                version = project.version

                pom {
                    name = 'common'
                    description = 'This library contains code shared between the Active Directory ' +
                            'Authentication Library (ADAL) for Android and the Microsoft ' +
                            'Authentication Library (MSAL) for Android. This library ' +
                            'includes only internal classes and is NOT part of the ' +
                            'public API'
                    url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android'
                    developers {
                        developer {
                            id = 'microsoft'
                            name = 'Microsoft'
                        }
                    }
                    licenses {
                        license {
                            name = 'MIT License'
                        }
                    }
                    inceptionYear = '2017'
                    scm {
                        url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android/tree/master'
                    }
                    properties = [
                            branch : 'master',
                            version: project.version
                    ]
                }
            }
            distDebug(MavenPublication) {
                from components.distDebug
                groupId 'com.microsoft.identity'
                artifactId 'common-debug'
                //Edit the 'version' here for VSTS RC build
                version = project.version
            }
        }

        // Repositories to which Gradle can publish artifacts
        repositories {
            maven {
                name "vsts-maven-adal-android"
                url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
                credentials {
                    username System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") : project.findProperty("vstsUsername")
                    password System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")
                }
            }
            maven {
                name "vsts-maven-android"
                url 'https://identitydivision.pkgs.visualstudio.com/IDDP/_packaging/Android/maven/v1'
                credentials {
                    username System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") : project.findProperty("vstsUsername")
                    password System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("assemble")) {
        task.dependsOn 'pmd'
    }

    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn 'lint', 'sourcesJar', 'pmd'
    }
}
