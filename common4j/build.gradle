/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    id 'java-library'
    id 'com.microsoft.identity.buildsystem' version '0.2.3'
    id 'maven-publish'

    // the below build plugin allows to generate BuildConfig files in a JAVA gradle project.
    // BuildConfig files are generated by default in an Android project, however, a non-Android java
    // module doesn't really have a concept of BuildConfig. This plugin allows us to create similar
    // looking BuildConfig constants in a java project.
    id 'com.github.gmazzo.buildconfig' version '3.0.0'

    // Test fixtures are commonly used to setup the code under test,
    // or provide utilities aimed at facilitating the tests of a component.
    // This will automatically create a testFixtures source set, in which you can write your test fixtures.
    id "java-test-fixtures"

    // This is needed to get Android Studio to resolve test fixtures dependencies
    id 'idea'

    // Add kotlin support
    id 'org.jetbrains.kotlin.jvm'
}

def desugarCode = false

if (project.hasProperty("sugar")) {
    desugarCode = sugar.toBoolean()
}

buildSystem {
    desugar = desugarCode
}

def enableCodeCoverage = false

if (project.hasProperty("codeCoverageEnabled")) {
    enableCodeCoverage = codeCoverageEnabled.toBoolean()
}

codeCoverageReport {
    coverage.enabled = enableCodeCoverage
}

repositories {
    mavenCentral()
}

apply from: './versioning/version_tasks.gradle'

project.ext.vstsUsername = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") : project.findProperty("vstsUsername")
project.ext.vstsPassword = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")

version = getAppVersionName()

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    destinationDirectory = reporting.file("$project.buildDir/outputs/jars")
}

// Task to generate javadoc
task generateJavadoc(type: Javadoc) {
    failOnError false
    title = "Microsoft Identity Common Java"
    source = sourceSets.main.java
    classpath += project.sourceSets.main.compileClasspath

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')

    exclude '**/BuildConfig.Java'
    exclude '**/R.java'
    destinationDir = reporting.file("$project.buildDir/outputs/javadoc")
}

// Task to generate javadoc.jar
task javadocJar(type: Jar, dependsOn: generateJavadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
    destinationDirectory = reporting.file("$project.buildDir/outputs/jars")
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId 'com.microsoft.identity'
            artifactId 'common4j'
            from components.java

            pom {
                name = 'common4j'
                description = 'This library contains common java code shared between the Active Directory ' +
                        'Authentication Library (ADAL) for Android and the Microsoft ' +
                        'Authentication Library (MSAL) for Android. This library ' +
                        'includes only internal classes and is NOT part of the ' +
                        'public API'
                url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android'
                developers {
                    developer {
                        id = 'microsoft'
                        name = 'Microsoft'
                    }
                }
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                inceptionYear = '2021'
                scm {
                    url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android/tree/master'
                }
                properties = [
                        branch: 'master',
                        version: project.version
                ]
            }
        }
    }

    repositories {
        maven {
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username project.ext.vstsUsername
                password project.ext.vstsPassword
            }
        }
        maven {
            name "vsts-maven-android"
            url 'https://identitydivision.pkgs.visualstudio.com/IDDP/_packaging/Android/maven/v1'
            credentials {
                username project.vstsUsername
                password project.vstsPassword
            }
        }
    }
}

def sliceParameter = "" // will be blank unless specified by developer
def dcParameter = "" // will be blank unless specified by developer
def disableAcquireTokenSilentTimeoutParameter = false // will be false unless specified by developer

if (project.hasProperty("slice")) {
    sliceParameter = slice
}

if (project.hasProperty("dc")) {
    dcParameter = dc
}

// By adding -PdisableAcquireTokenSilentTimeout in your dev environment, you will no longer subject to the ATS timeout,
// and your life will be much happier during debugging.
if (project.hasProperty("disableAcquireTokenSilentTimeout")) {
    disableAcquireTokenSilentTimeoutParameter = true
}

sourceSets {
    main {
        java.srcDirs = ['src/main', "$project.buildDir/generated/source/buildConfig/main"]
        buildConfigField("String", "SLICE", "\"$sliceParameter\"")
        buildConfigField("String", "DC", "\"$dcParameter\"")
        buildConfigField("boolean", "DISABLE_ACQUIRE_TOKEN_SILENT_TIMEOUT", "${disableAcquireTokenSilentTimeoutParameter}")
    }
    test {
        java.srcDirs = ['src/test']
    }
}

// This is needed to get Android Studio to resolve test fixtures dependencies
// by default test fixtures dependencies are not resolved in IDE
configurations {
    resolvableTestFixturesImplementation {
        canBeResolved true;
    }
}

configurations.testFixturesImplementation.extendsFrom(configurations.resolvableTestFixturesImplementation);

idea {
    module {
        // This is needed to get Android Studio to resolve test fixtures dependencies
        // by default test fixtures dependencies are not resolved in IDE
        scopes.COMPILE.plus += [configurations.resolvableTestFixturesImplementation]
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"

    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'
    compileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    implementation "com.nimbusds:nimbus-jose-jwt:$rootProject.ext.nimbusVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation 'org.json:json:20180813'
    implementation 'com.github.stephenc.jcip:jcip-annotations:1.0-1'
    implementation "cz.msebera.android:httpclient:$rootProject.ext.mseberaApacheHttpClientVersion"

    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'
    testCompileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"

    testFixturesCompileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'
    testFixturesCompileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    resolvableTestFixturesImplementation "org.robolectric:junit:$rootProject.ext.robolectricVersion"

    implementation platform("io.opentelemetry:opentelemetry-bom:1.18.0")
    implementation('io.opentelemetry:opentelemetry-api:1.18.0')
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

buildConfig {
    // forces the package (of the generated BuildConfig file). Defaults to '${project.group}'
    packageName("com.microsoft.identity.common.java")
    useJavaOutput() // forces the outputType to 'java'
}

afterEvaluate {
    assemble.dependsOn sourcesJar, javadocJar

    // these tasks are generated by the buildconfig plugin..for more details, read comment about it
    // above in the plugins block.
    compileJava.dependsOn generateBuildConfig, generateTestBuildConfig
}
